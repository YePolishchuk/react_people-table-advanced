{"version":3,"sources":["components/Navbar.tsx","App.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","index.tsx"],"names":["Navbar","isActiveButton","isActive","cn","className","role","to","App","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","centuriesFilters","PeopleFilters","setSearchParams","sex","get","query","centuries","getAll","type","placeholder","onChange","event","target","setInputValue","map","century","includes","filter","centur","length","Loader","PersonLink","person","slug","name","columns","born","died","PeopleTable","people","useParams","personParent","personName","find","sort","order","a","b","localeCompare","reverse","sortedType","motherName","fatherName","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","getPeople","peopleList","catch","finally","visiblePeople","Math","ceil","toLowerCase","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.337d9244.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nexport const Navbar = () => {\n  const isActiveButton = ({ isActive }: { isActive: boolean }) => (\n    cn('navbar-item', { 'has-background-grey-lighter': isActive })\n  );\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={isActiveButton} to=\"/\">Home</NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={isActiveButton}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nconst centuriesFilters = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const setInputValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(\n      getSearchWith(\n        searchParams,\n        (event.target.value)\n          ? { query: event.target.value }\n          : { query: null },\n      ),\n    );\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={cn({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={cn({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={cn({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={(event) => (\n              setInputValue(event)\n            )}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesFilters.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={cn('button mr-1',\n                  { 'is-info': centuries.includes(century) })}\n                params={{\n                  centuries: !centuries.includes(century)\n                    ? [...centuries, century]\n                    : centuries.filter(centur => centur !== century),\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button',\n                { 'is-outlined': centuries.length },\n                { 'is-success': !centuries.length })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ sex: null, query: null, centuries: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types';\n\ninterface Props {\n  person: Person | null,\n}\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`/people/${person?.slug}`}\n      className={cn({ 'has-text-danger': person?.sex === 'f' })}\n    >\n      {person?.name}\n    </Link>\n  );\n};\n","import { useParams, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\n\ninterface Props {\n  people: Person[]\n}\n\nconst columns = {\n  name: 'Name',\n  sex: 'Sex',\n  born: 'Born',\n  died: 'Died',\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n  const personParent = (personName: string | null) => {\n    return people.find(person => person.name === personName) || null;\n  };\n\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const isSorted = (sortedType: string) => {\n    if (sort !== sortedType) {\n      return { sort: sortedType, order: null };\n    }\n\n    if (sort && !order) {\n      return { sort: sortedType, order: 'desc' };\n    }\n\n    return { sort: null, order: null };\n  };\n\n  if (sort) {\n    people.sort((a, b) => {\n      switch (sort) {\n        case 'name':\n        case 'sex':\n          return a[sort].localeCompare(b[sort]);\n        case 'born':\n        case 'died':\n          return a[sort] - b[sort];\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order) {\n    people.reverse();\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(columns).map(([type, name]) => (\n            <th key={type}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {name}\n                <SearchLink params={isSorted(type)}>\n                  <span className=\"icon\">\n                    <i\n                      className={cn(\n                        'fas',\n                        {\n                          'fa-sort': sort !== type,\n                        },\n                        {\n                          'fa-sort-up': (sort === type && !order),\n                        },\n                        {\n                          'fa-sort-down': (sort === type && order),\n                        },\n                      )}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            data-cy=\"person\"\n            className={cn({ 'has-background-warning': person.slug === slug })}\n            key={person.slug}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {\n                personParent(person.motherName)\n                  ? (<PersonLink person={personParent(person.motherName)} />)\n                  : (person.motherName || '-')\n              }\n            </td>\n            <td>\n              {\n                personParent(person.fatherName)\n                  ? (<PersonLink person={personParent(person.fatherName)} />)\n                  : (person.fatherName || '-')\n              }\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then((peopleList) => setPeople(peopleList))\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  let visiblePeople = [...people];\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    visiblePeople = visiblePeople\n      .filter(person => centuries\n        .includes(Math.ceil(person.born / 100).toString()));\n  }\n\n  if (query) {\n    visiblePeople = visiblePeople.filter(person => (\n      person.name.toLowerCase().includes(query)\n      || person.motherName?.toLowerCase().includes(query)\n      || person.fatherName?.toLowerCase().includes(query)\n    ));\n  }\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {(!isError && !isLoading && people.length) && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n\n              {(!isLoading && people.length === 0) && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n              {(visiblePeople.length === 0 && !isLoading) && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n              {(!isLoading && !isError && visiblePeople.length !== 0) && (\n                <PeopleTable people={visiblePeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeoplePage } from './components/PeoplePage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<h1 className=\"title\">Home Page</h1>} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}